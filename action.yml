name: 'iOS Simulator UDID Action'
description: 'Custom GitHub Action to retrieve the iOS Simulator UDID.'

inputs:
  os_version:
    description: |
      iOS version to use for the simulator runtime. Specify the version in the format "major-minor" (e.g., "17-5").
    required: false
    default: '17-5'

  iphone_type:
    description: |
      iPhone model to use for the simulator (e.g., iPhone-15, iPhone-14).
    required: false
    default: 'iPhone-15'

runs:
  using: 'composite'
  steps:
    - name: Install Xcode Command-Line Tools
      run: |
        echo "Checking for Xcode command-line tools..."
        if ! xcode-select --version &> /dev/null; then
          echo "Installing Xcode command-line tools..."
          xcode-select --install
        else
          echo "Xcode command-line tools already installed."
        fi
      shell: bash

    - name: Set Xcode Version
      run: |
        echo "Setting Xcode version..."
        sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
        xcodebuild -version
      shell: bash

    - name: List Available Simulators (Before Creating)
      run: xcrun simctl list devices
      shell: bash

    - name: Create or Find Existing Simulator
      run: |
        OS_VERSION=${{ inputs.os_version }}
        IPHONE_TYPE=${{ inputs.iphone_type }}
        RUNTIME_ID="com.apple.CoreSimulator.SimRuntime.iOS-$OS_VERSION"
        DEVICE_TYPE="com.apple.CoreSimulator.SimDeviceType.$IPHONE_TYPE"

        echo "Checking if a simulator already exists for $IPHONE_TYPE (iOS $OS_VERSION)..."
        EXISTING_UDID=$(xcrun simctl list devices available | grep "$IPHONE_TYPE (iOS $OS_VERSION)" | awk -F '[()]' '{print $2}' | head -n 1)

        if [[ -n "$EXISTING_UDID" ]]; then
          echo "Using existing simulator: $EXISTING_UDID"
          DEVICE_UDID=$EXISTING_UDID
        else
          echo "Creating a new iOS Simulator for $IPHONE_TYPE (iOS $OS_VERSION)..."
          DEVICE_UDID=$(xcrun simctl create "$IPHONE_TYPE" $DEVICE_TYPE $RUNTIME_ID)
          echo "Simulator created with UDID: $DEVICE_UDID"
        fi

        # Boot the simulator
        echo "Booting simulator $DEVICE_UDID..."
        xcrun simctl boot $DEVICE_UDID

        # Store UDID for later steps
        echo $DEVICE_UDID > udid.txt
        echo "DEVICE_UDID=$DEVICE_UDID" >> $GITHUB_ENV
      shell: bash

    - name: Wait for Simulator to Boot
      run: |
        echo "Waiting for simulator ($DEVICE_UDID) to be fully booted..."
        xcrun simctl bootstatus $DEVICE_UDID -b || {
          echo "Error: Simulator failed to boot.";
          exit 1;
        }
        echo "Simulator is ready!"
      shell: bash

    - name: Verify Simulator is Running
      run: xcrun simctl list devices | grep "Booted"
      shell: bash
